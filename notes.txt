Folder structure:
  index.html
  
  (dir) assets
    
    (dir) js
        todo.js
      
      (dir) lib
        jquery.js
    
    (dir)css
      todo.css

Event Bubbling:
  When you click on an element, it also fires any click events attatched to parent elements.

  To prevent the event bubbling, you must tell the even to stop triggering events.
    do this using: event.stopPropegation();

Adding event listeners to dynamically added elements:
  You add the event listener to the 'container' where the dynamic elements will be added.
  Then, you specify the dynamic element in the jquery addEventListener syntax.

  $('ul').on('click', 'li', function(){});
  // the 'li' argument is what the event listener is checking for when the click event fires.


box-shadow
  - offset x, offset y, color

box-sizing
   This fixes the width/height of an element when using width: 100%
   so that the element doesn't extend past the diemensions of its parent,
   if there is also padding or margin applied.

   webkit and moz prefixes must be included.

Using css selectors to animate instead of js
  li:hover span {
    width: 100px;
  }

  when you hover over the li, the style will be applied
  to the span element(s) directly inside the li.

Adding an invisible border
  border: 3px solid rgba(0, 0, 0, 0);

  this is usefull for when you have elements such as an input 
  of type 'text' that causes elements below it to shift when it's 
  under focus. For example in a project if you add a border when you 
  you have the input under focus 


removing an element from a JS array.
  - Don't forget that pop removes the last item in the array, passing an 
    argument will not pop/remove that index from the array.



             Generic Stack
Backend Language/app    Server    Database
------------------------------------------
HTML, JS, CSS     ==>        Webpage


             Reddit Stack
Python/Flask     nginx          PostgreSQL
------------------------------------------
HTML, JS, CSS     ==>        Webpage
  (Backbone)


             Our Stack
Node JS          Express           MongoDB
------------------------------------------
HTML, JS, CSS     ==>        Webpage


Section 20: Intro to Backend notes - 


static vs dynamic web pages:
  - dynamic pages are compiled on the server, constructed and then sent
    to the user.

  - static pages do not change, the code that makes the page is constant.

stack: A generic term referring to the technologies used in constructing a 
       website/webapp.


HTTP requests:
  1) An HTTP request is sent to a website's ip address.

  Get - A request form browswer search bar; asking for information back.
   - body: the returned HTML that is sent to the browser
   - headers: 
   - status: 200(ok)
   - time: how long did the GET request take


# Cloud 9 ##

  # what is?
    cloud 9 is a platform useful for hosting and developing apps on. You 
    have access to a terminal and can select project presets to get started 
    quickly!

  # Using cloud 9 to host your app temporarily
    To use cloud 9 to run your Node/Express server you need to tell Express 
    what port to listen on, along with an IP.

    app.listen(process.env.PORT, process.env.IP);

    then, when you run your server you can use the 'Preview' button at the very
    top of your Cloud 9 IDE to preview the app.
  

# NODE ##----------------------------------------------------------------------
  Intro to Node:
    What is Node?
      A javascript runtime built on v8 js engine and chakra. It is a non 
      browswer platform that allows you to run javascript files. 

    Why are we learning it?
      Its new and very popular but more importantly its asynchronous, open 
      source, great libraries, high-performance, strong vibrant community. Also 
      you can leverage JS knowledge to learn backend.
    
      Node allows you to run javascript on the server as if you were running 
      python, ruby or any other backend language.
  
  # NPM ##---------------------------------------------------------------------
  # What is NPM?
    Node Package Manager (NPM), is a package manager that allows you to install 
    packages; js code that other people have written that you can include in 
    your app.

  # Installing and Using Packages:
    Use 'npm install' to install a package
    use 'require()' to include a package

    All packages installed using NPM will be placed in a 'node_modules' folder.
    Some packages that you install through NPM will have their own 'node_modules' 
    folder. This is becuase some packages depend, on other NPM packages.

  # Package.JSON
    You should use npm init to create a package.json to record valuable meta-data
    about your app. This is the recipe of your app that you can send to anyone 
    it will contain all the relevent information they need to build it, w/o 
    requireing you to send them all the dependency folders/files.

    A file that contains all of the meta-data about a given app. Various 
    details about the app are listed, including: name, version #, git repo URL,
    and dependencies.

    # node_modules folder and github
      When we are sharing code and packages and repositories and they depend on 
      10 or 20 other packages, instead of including the folders on github. We 
      can list the packages they require using the package.json file. 


-------
Framework vs toolkit vs library
stackoverflow.com/questions/3057526/framework-vs-toolkit-vs-library

tldr:
  Difference vs library and framework is INVERSION OF CONTROL.
  When you call a library, you are in control, but it is reversed with a 
  framework. A toolkit is a bunch of independent libraries that work well
  with one another.
-------

# Introduction to Express ##
  https://expressjs.com/

  What is Express?
    Express is a webdevelopment FRAMEWORK. Express is the glue that helps keep
    your app together.

  Why Express?
    It is the most Node framework. There is a large community and lots of learning
    materials. Express is lightweight, as opposed to Ruby on Rails which is a heavy
    weight framework. Heavy weight frameworks do more magic to get things done 
    quickly.


# Express Continued ##
  Routing (https://expressjs.com/en/starter/basic-routing.html)
  * Routing refers to determining how an application responds to a client 
    request to a particular endpoint, which is a URI(or path) and a speciffic 
    HTTP request method (GET, POST, and so on).

    Each route can have one or more handler functions, which are executed when 
    the route is matched. The route definition takes the following structure:
      app.METHOD(PATH, HANDLER)
      Where:
        * app is an instance of express
        * Method is an HTTP request method, in lowercase
        * Path is a path on the server
        * Handler is the function executed when the route is matched


  var express = require('express');
  var app = express();

  app.get([options], callback)

# The Order of Routes #
  The order of routes matters! If you place your catchall route:
    app.get('*', function(req, res){
      res.send('catchall');
    });
  then any get request will be caught by the catchall '*' route. To avoid this
  behavior, place the catchall as the very last GET request you handle.

# Route Parameters #
  Route Parameters are named URL segments that are used to capture the values 
  specified at their position in the URL. The captured values are populated in 
  the req.params object, with the name of the route parameter specified in the 
  path as their respective keys.

  you use the ':' to designate the parameter 

  Route path: /users/:userID/books/:bookId
  Request URL: http://localhost:3000/users/34/books/8989
  req.params: {"userId": "34", "bookId" : "8989"}

  A Parameter could look something like:
  // app.get("/r/subredditName/comments/id/title/") // the idea
  - app.get("/r/:subredditName") // the implementation
  - app.get("/r/:subredditName/comments/:id/:title/")

   


# HTTP Request Methods ##
  # GET #
    The GET method requests a representation of the specified resource. requests
    using GET should only retrieve data and should have no other effect.
  
  # HEAD #
    The HEAD method asks for a response identical to that of a GET request, but
    without the response body. This useful for retrieving meta-information 
    written in response headers, without having to transport the entire content.
  
  # POST #
    The POST method requests that the server accept the entity enclosed in the  
    request as a new subordinate of the web resource identified by the URI. 
    The data POSTed might be, for example, an annotation for existing resources;
    a message for a bulletin board, newsgroup, mailing list, or comment thread; 
    a block of data that is the result of submitting a web form to a 
    data-handling process; or an item added to a database.

  # PUT #
    The PUT method requests that the enclosed entity be stored under the 
    supplied URI. If the URI refers to an already existing resource, it is 
    modified; if the URI does not point to an existing resource, then the 
    server can create the resource with that URI.

  # DELETE #
    The DELETE method deletes the specified resource.

  # TRACE # 
    The TRACE method echoes the recieved request so that the client can see 
    what if any changes or additions have been made by intermediate servers.

  # OPTIONS #
    The OPTIONS method returns the HTTP methods that the server supports for 
    the specified URL. THis can be used to check the functionality of a web 
    server by requesting '*' instead of a specified resource.

  # CONNECT #
    The CONNECT method converts the request connection to a transparent TCP/IP 
    Tunnel, usually to facillitate SSL encrypted communication (HTTPS) through 
    an unencrypted HTTP proxy.

  # PATCH #
    The PATCH method applies partial modifications to a resource.

# Safe HTTP methods ##
  # HEAD, GET, OPTIONS and TRACE, they should produce no side effects. However 
    If programmed carelessly a GET request could delete content/articles. for
    example http://www.examplepage.com/article/1234/delete which if arbitrarily 
    fetched, even using GET, would simply delete the article. This behavior 
    is not by default and would have to be added by a programmer. Don't do this,
    otherwise a web crawler could run around deleting all the articles on your 
    site.
